素材配布漏れの件再発を防ぐための案
現状：
共通素材サバー5709ですべての素材が入っています
各開発の案件の素材は全部5709で混ぜています
リリースの時、今回イベント使える素材だけ、ファイル名指定して配布します
５０００アップしたら素材漏れを検出するのは限界があります（ガシャメイン機、後半関連の素材など）

ここで疑問：５７０９がそもそも必要？
必要性推測１：
サーバーのハードディスク容量が足りないため？
調査
５７０９
Filesystem           1K-ブロック    使用   使用可 使用% マウント位置
/dev/vda1             30963584  29387724      3004 100% /

５８０６(私の開発環境)
Filesystem           1K-ブロック    使用   使用可 使用% マウント位置
/dev/vda1             30963584  23233452   6157276  80% /

ハードディスクの容量は一緒ではないか？５７０９に入れるもの、ほかの環境にもいれるはず
PS. 5709 は100% 使われているし、このままだと何かしないとまずいでしょう！！

必要性推測２：
格納作業が５７０９に集約するため
納品の素材は企画が格納してもらう現状
全然わからない私はあくまでも推測。調査します

勝手に５７０９が要らないと判断した私からの提案

改善案概要：
▲共通素材サバー5709をなくす
umount, ln -s
▲素材は各開発ブランチで管理する
素材格納は各開発環境に格納
▲リリースの時、開発ブランチをmasterにマージして、そのまま配布する
そうするとファイル指定することが忘れたり、そういう人為的なミスが防ぐことができます

新しい運用方法詳細：
イベント開発開始の時、
①開発サーバ：シス個人開発サーバ、今まで通り
役割：シス開発、モジュール変更、テンプレを修正
考慮：共同開発のため、各イベント固定するのは難しい

②編集サーバ：イベント（正確に言うと案件）毎に設置すること
役割：該当案件の素材の格納、企画とクリエイティブのテンプレ修正
ポイント詳細：
該当イベントの素材しか格納しない
ここで直接モジュール変更はなるべくやならい
タスク毎にちゃんとgit commitができたら差分確認しやすい（理想過ぎ？）
もし隠したい素材があったら、以下のコマンドでギット管理から外す。
git rm --cache <file名>

③検証サーバ：
イベント（正確に言うと案件）毎に設置すること
役割：検証用
ロジックを変更しないチート
チート以外のモジュール変更、テンプレ変更は禁止！
コード更新したら変更点をメールでQAに伝える

懸念点
①開発サーバが足りない
今ガンロワ持っているサーバ数：１５
新方法実施するためのサーバの最低数：６シス + ３イベ編集 + ３イベ検証 + (新イベ編集 ＋ 検証) + 定常案件検証 = 6+3+3+2+1 = 15  (ちょうどじゃん！)

ーー＞チームとして、新しい個人開発環境を申請することができる？
	簡単に作れるローカルサーバー環境構築方法？ (GCCができるらしい)

②編集サーバで素材を格納することについて
イベント共同素材の場合はどうする？
例えば　sp/part/common
前回のメイン機を使ってパラメ調整したいけど、前回のイベントはまだリリースされなかったとか

別件１：ごちゃごちゃなテンプレはもう見たくない！
問題１：
tab vs 空白x2 vs 空白x4？　チームで同一しましょうよ
問題２：
シスはテンプレを一切触らないことが可能？
案：
Step 1: シスとクリエイティブは変数名、データー構造、subテンプレ使うかについて事前に相談して決める
Step 2: シスは変数名、データー構造を提供し、subテンプレのつながり
Step 3: templateのif文、loop文はクリエイティブに任せる
何のため：
ごちゃごちゃなテンプレはもう見たくない！（by liu && harry）
シス工数を減らす（個人的にサボりたいでもあり。。。）
バックとフロントを分立する。各の専門領域を生かす。将来外部化につながるかも

別件２：開発ステージングDBを作れるか
現状：
全部の開発環境は唯一の開発DBに向いている
ステージング環境、本番環境は唯一の本番DBに向いている
各開発の案件のテーブルschema、データは全部開発DBで混ぜています
リリースの時、今回イベント使えるデータだけ、シスがキーを指定して同期します
キー指定漏れたら、同期漏れが発生する
企画側がマスターデーターを変更したら、同期の依頼が忘れたら同期漏れが発生する

スケジュールチートはガンロワだと一カ所にまとめでやることが出来ない、
開発環境みたい、ユーザ毎にスケジュールチートは本番で実現するのは難しい
未来の時間を本番DBに残ったら予測不能な問題が起こるかも

改善案
開発ステージングDBをつくる
直前リリースのイベントの必要のデーターだけここにある

開発DB　ーー選択して同期ーー＞　開発ステージングDB　ーー全同期ーー＞　本番DB

ステージング検証は開発ステージングDBでやる
するとスケジュールチートはできます！

理想：
QA環境は開発ステージングDBに指向する
	フロー：
	開発完了ーー＞開発ステージングDB同期ーー＞QAーー＞one click で本番に全同期ーー＞リリース

でも、
検証までに、正確なデータがすべて揃えることがほぼ不可能
同時にQAする案件があったら、各案件の開発ステージングDBはどうする？

なので現実をふまえて以下の提案：
開発ステージングサーバを新設立、開発ステージングDBに指向

従来のフロー：
QA完了 --> コードを本番ステージングサーバにあげる --> 本番DB同期 --> 無理やりチート --> ステージング検証

新フロー：
QA完了 --> コードを開発ステージングサーバにあげる --> 開発ステージングDB同期 --> 開発ステージング検証（チートツール使える）
--> one click で本番に全同期

